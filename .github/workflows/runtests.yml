name: Quick tests
on: [pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  basic-tests:
    name: ${{ matrix.compiler }}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      CXX: "ccache ${{ matrix.compiler }}"
      CXXFLAGS: "-fdiagnostics-color -O2 -g"
    strategy:
      matrix:
        compiler: ["clang++", "g++"]
    steps:
      - uses: actions/checkout@v3
      - name: "Setup ccache . . ."
        uses: Chocobo1/setup-ccache-action@v1
        with:
          update_packager_index: false
          install_ccache: true
      - name: "Configure . . ."
        run: |
          mkdir -p m4
          ./autogen.sh 
          ./configure CXX="$CXX" CXXFLAGS="$CXXFLAGS" --disable-hpcombi
      - name: "Build libsemigroups . . ."
        run: make -j4
      - name: "Build test_all . . ."
        run: make test_all -j4
      - name: "Run the quick and standard tests . . ."
        run: ./test_all "[quick],[standard]"
  benchmarks:
    name: "Benchmarks compile"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      CXX: "ccache g++"
      CXXFLAGS: "-fdiagnostics-color"
    steps:
      - uses: actions/checkout@v3
      - name: "Setup ccache . . ."
        uses: Chocobo1/setup-ccache-action@v1
        with:
          update_packager_index: false
          install_ccache: true
      - name: "Configure . . ."
        run: |
          mkdir -p m4
          ./autogen.sh 
          ./configure CXX="$CXX" CXXFLAGS="$CXXFLAGS"
      - name: "Build libsemigroups . . ."
        run: make -j4
      - name: "Build bench_all . . ."
        run: |
          make bench_all -j4
  coverage:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      CXX: "ccache g++"
      CXXFLAGS: "-fdiagnostics-color"
    steps:
      - uses: actions/checkout@v3
      - name: "Setup ccache . . ."
        uses: Chocobo1/setup-ccache-action@v1
        with:
          update_packager_index: false
          install_ccache: true
      - name: "Install dependencies . . ."
        run: |
          sudo apt-get --yes update
          sudo apt-get install -y lcov
      - name: "Run quick tests . . ."
        run: |
          sudo ln -sf /usr/bin/gcov-13 /usr/bin/gcov
          export GCOV=/usr/bin/gcov-13
          etc/test-code-coverage.sh test_all "[quick][exclude:no-valgrind][exclude:no-coverage]"
      - name: "Uploading to Codecov . . ."
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: coverage.info
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
      - name: "Cleanup . . ."
        run: |
          rm -f coverage.info
  distcheck:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      CXX: "ccache g++"
      CXXFLAGS: "-fdiagnostics-color"
    steps:
      - uses: actions/checkout@v3
      - name: "Setup ccache . . ."
        uses: Chocobo1/setup-ccache-action@v1
        with:
          update_packager_index: false
          install_ccache: true
      - name: "Configure . . ."
        run: |
          mkdir -p m4 
          ./autogen.sh 
          ./configure CXX="$CXX" CXXFLAGS="$CXXFLAGS"
      - name: "make distcheck . . ."
        run: make distcheck -j4
  doc:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: "Install dependencies . . ."
        run: |
          sudo apt-get --yes update
          sudo apt-get install graphviz --yes
      - name: "Set up Homebrew . . ."
        uses: Homebrew/actions/setup-homebrew@master
      - name: "Install latest doxygen . . ."
        run: |
          brew install gcc
          brew install doxygen
      - name: "Pip install docs/requirements.txt . . ."
        run: pip install -r docs/requirements.txt
      - name: "Clone doxygen-awesome-css . . ."
        run: |
          git submodule update --init --recursive
      - name: "Configure . . ."
        run: |
          mkdir -p m4 && ./autogen.sh && ./configure
      - name: "Build documentation . . ."
        run: |
          echo "Doxygen version: "
          doxygen --version
          make doc
        # echo TODO(0) actually check that the doc can be built ok
        # ( ! (grep "WARNING:" make-doc-sphinx.log | grep -v "WARNING: bibtex citations changed, rerun sphinx" | grep -v "WARNING: Could not lex literal_block") )
  macosx:
    timeout-minutes: 60
    runs-on: macOS-latest
    env:
      CXX: "ccache clang++"
      CXXFLAGS: "-fdiagnostics-color"
    steps:
      - uses: actions/checkout@v3
      - name: "Setup ccache . . ."
        uses: Chocobo1/setup-ccache-action@v1
        with:
          update_packager_index: false
          install_ccache: true
      - name: "Install dependencies . . ."
        run: brew install autoconf automake libtool
      - name: "Clang version . . ."
        run: clang++ --version
      - name: "Configure . . ."
        run: |
          mkdir -p m4
          ./autogen.sh
          ./configure CXX="$CXX" CXXFLAGS="$CXXFLAGS" --disable-hpcombi --disable-backward
      - name: "Build libsemigroups . . ."
        run: make -j4
      - name: "Build test_all . . ."
        run: make test_all -j4
      - name: "Run the quick tests . . ."
        run: ./test_all "[quick]"
  test-x86-32:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      GH_ACTIONS_ABI: "32"
      GH_ACTIONS_ARCH: "x86"
      GH_ACTIONS_TEST_PROG: "test_all"
      GH_ACTIONS_TEST_TAGS: "[quick][exclude:no-valgrind][exclude:no-coverage][exclude:BMat8]"
    steps:
      - uses: actions/checkout@v3
      - name: "Running the quick tests in libsemigroups-docker-x86-32-base docker container . . ."
        run: |
          ci/launch-docker-container.sh
